import { Navbar, Card, Modal, Container, Button, Accordion, Nav, NavDropdown, Breadcrumb, Row, Col, CardImg } from "react-bootstrap";
import SiteNavbar from "../components/SiteNavbar";
import { Link } from "react-router-dom";

import TeapotCardLarge from "../components/teapotCardLarge";
import RowStyleDiv from "../components/rowdiv";

import { COLORS, COLORS_DESC, GROUP_DESCRIPTIONS, GROUP_TITLES, INTANGIBLES, INTANGIBLES_DESC, REFERENCEMEDIA, REFERENCEMEDIA_DESC, STYLES, STYLES_DESC, MATERIALS, MATERIALS_DESC } from "../data/allkeys.jsx";
import { useState } from "react";

import ModifierCard from "../components/ModifierCard";
import ModifierShelf from "../components/ModifierShelf";
import ModifierNavbar from "../components/ModifierNavbar";
import TeapotFooter from "../components/teapotfooter";

function importAll(r) {
  let images = {};
  r.keys().map((item, index) => {
    images[item.replace("./", "")] = r(item);
  });
  return images;
}

//take an dictionary of images and return an array of names from the keys
function getNames(images) {
  let names = [];
  Object.keys(images).forEach((key) => {
    names.push(key);
  }
  );
  return names;
}

//function that takes a list of names, appends .png to the end and returns an array of ModifierCard objects
function expand(group, names, descs, thumbnailstr, images_mj, images_sd, handleShow, handleClose, statesModals, isMobile,p_start, p_end, sd_start, sd_end)
{
  let cards = [];
  let k = Object.keys(names).sort();
  for (var i = 0; i < Math.ceil(k.length); i += 5) {
    cards.push(
<ModifierShelf
id0 = {k[i] + ".png"}
mj0 = {images_mj[k[i] + ".png"]}
sd0 = {images_sd[k[i] + ".png"]}
show0 = {statesModals[k[i] + ".png"]}
name0 = {names[k[i]]}
desc0 = {descs[k[i]]}
mjprompt0 = {p_start + names[k[i]] + p_end}
sdprompt0 = {sd_start + names[k[i]] + sd_end}

id1={k[i + 1] + ".png"}
mj1={images_mj[k[i + 1] + ".png"]}
sd1={images_sd[k[i + 1] + ".png"]}
show1={statesModals[k[i + 1] + ".png"]}
name1 = {names[k[i + 1]]}
desc1 = {descs[k[i + 1]]}
mjprompt1 = {p_start + names[k[i + 1]] + p_end}
sdprompt1 = {sd_start + names[k[i + 1]] + sd_end}

id2={k[i + 2] + ".png"}
mj2={images_mj[k[i + 2] + ".png"]}
sd2={images_sd[k[i + 2] + ".png"]}
show2={statesModals[k[i + 2] + ".png"]}
name2 = {names[k[i + 2]]}
desc2 = {descs[k[i + 2]]}
mjprompt2 = {p_start + names[k[i + 2]] + p_end}
sdprompt2 = {sd_start + names[k[i + 2]] + sd_end}

id3={k[i + 3] + ".png"}
mj3={images_mj[k[i + 3] + ".png"]}
sd3={images_sd[k[i + 3] + ".png"]}
show3={statesModals[k[i + 3] + ".png"]}
name3 = {names[k[i + 3]]}
desc3 = {descs[k[i + 3]]}
mjprompt3 = {p_start + names[k[i + 3]] + p_end}
sdprompt3 = {sd_start + names[k[i + 3]] + sd_end}

id4={k[i + 4] + ".png"}
mj4={images_mj[k[i + 4] + ".png"]}
sd4={images_sd[k[i + 4] + ".png"]}
show4={statesModals[k[i + 4] + ".png"]}
name4 = {names[k[i + 4]]}
desc4 = {descs[k[i + 4]]}
mjprompt4 = {p_start + names[k[i + 4]] + p_end}
sdprompt4 = {sd_start + names[k[i + 4]] + sd_end}

handleShow = {handleShow}
handleClose = {handleClose}
isMobile = {isMobile}
group = {group}
thumbnailstr = {thumbnailstr}
></ModifierShelf>
    //  <ModifierCard id={k[i] + ".png"} mj={images_mj[k[i] + ".png"]} sd={images_sd[k[i] + ".png"]} handleShow={handleShow} handleClose={handleClose} show={statesModals[k[i] + ".png"]}></ModifierCard>
    );
  }
  return cards;
}

function expand_mobile(group, names, descs, thumbnailstr, images_mj, images_sd, handleShow, handleClose, statesModals, isMobile,p_start, p_end, sd_start, sd_end)
{
  console.log(names);
  let cards = [];
  let k = Object.keys(names).sort();
  for (var i = 0; i < Math.ceil(k.length); i += 2) {
    cards.push(
<ModifierShelf
id0 = {k[i] + ".png"}
mj0 = {images_mj[k[i] + ".png"]}
sd0 = {images_sd[k[i] + ".png"]}
show0 = {statesModals[k[i] + ".png"]}
name0 = {names[k[i]]}
desc0 = {descs[k[i]]}
mjprompt0 = {p_start + names[k[i]] + p_end}
sdprompt0 = {sd_start + names[k[i]] + sd_end}

id1={k[i + 1] + ".png"}
mj1={images_mj[k[i + 1] + ".png"]}
sd1={images_sd[k[i + 1] + ".png"]}
show1={statesModals[k[i + 1] + ".png"]}
name1 = {names[k[i + 1]]}
desc1 = {descs[k[i + 1]]}
mjprompt1 = {p_start + names[k[i + 1]] + p_end}
sdprompt1 = {sd_start + names[k[i + 1]] + sd_end}


handleShow = {handleShow}
handleClose = {handleClose}
isMobile = {isMobile}
group = {group}
thumbnailstr = {thumbnailstr}

></ModifierShelf>
    );
  }
  return cards;
}



function AIModifiersPage(props) {
  document.title = props.title;
  const images_mj = importAll(require.context("../teapots_mj", true, /\.(png|jpe?g|svg)$/));
  const images_sd = importAll(require.context("../teapots_sd", true, /\.(png|jpe?g|svg)$/));
  const names_mj = getNames(images_mj);
  props.analytics.page({
    url: "https://rexwang8.github.io/resource/ai/modifiers",
  });


 

  

  //function to handle modal states. one variable per modal autogenerated.
  const [statesModals, setStatesModals] = useState({});

  const handleShow = (evt) => {
    let name = evt.target.id;
    setStatesModals({ ...statesModals, [name]: true });
  };

  const handleClose = () => {
    //set all modals to false
    setStatesModals({});
  };

  const [ddval, setDDVal] = useState("colorsSimple");

  const handleSelect=(e)=>{
    setDDVal(e)
  }

  let materialsMetals = [];
  let materialsGemstones = [];
  let stylesPhotosites = [];
  let stylesTimeframes = [];
  let stylesAbstractions = [];
  let stylesRenderer = [];
  let stylesComplexity = [];
  let stylesPunk = [];
  let stylesWave = [];
  let colorsSimple = [];
  let colorsPalletes = [];
  let shapesForms = [];
  let intangibleEmotions = [];
  let intangibleConcepts = [];
  let intangibleSymbols = [];
  let intangibleZodiac = [];
  let intangibleNumbers = [];
  let intangibleNumbersystem = [];
  let referenceGames = [];
  let referenceAnimeStudio = [];

  let method = expand;
  if (props.isMobile == true) {
    method = expand_mobile;
  }
  materialsMetals = method(GROUP_TITLES[ddval], MATERIALS.metals, MATERIALS_DESC.metals, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot made of ', " --ar 16:9 --v 3", "Utah Teapot made of ", "");
  materialsGemstones = method(GROUP_TITLES[ddval], MATERIALS.gemsStones, MATERIALS_DESC.gemsStones, "mj3",images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot made of ', " --ar 16:9 --v 3", "Utah Teapot made of ", "");
  stylesPhotosites = method(GROUP_TITLES[ddval], STYLES.photosites, STYLES_DESC.photosites, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesTimeframes = method(GROUP_TITLES[ddval], STYLES.timeframes, STYLES_DESC.timeframes, "mj3",images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'A photo of a Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesAbstractions = method(GROUP_TITLES[ddval], STYLES.abstraction, STYLES_DESC.abstraction, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesRenderer = method(GROUP_TITLES[ddval], STYLES.renderers, STYLES_DESC.renderers, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', "renderer --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesComplexity = method(GROUP_TITLES[ddval], STYLES.complexity, STYLES_DESC.complexity, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesPunk = method(GROUP_TITLES[ddval], STYLES.punkstyles, STYLES_DESC.punkstyles, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  stylesWave = method(GROUP_TITLES[ddval], STYLES.wavestyles, STYLES_DESC.wavestyles, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
  colorsSimple = method(GROUP_TITLES[ddval], COLORS.colors, COLORS_DESC.colors, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " color, photo of a Utah Teapot");
    colorsPalletes = method(GROUP_TITLES[ddval], COLORS.colorpalletes, COLORS_DESC.colorpalletes, "mj3",images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " color, photo of a Utah Teapot");
    shapesForms = method(GROUP_TITLES[ddval], COLORS.shapes, COLORS_DESC.shapes, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " shape, photo of a Utah Teapot");
    intangibleEmotions = method(GROUP_TITLES[ddval], INTANGIBLES.emotions, INTANGIBLES_DESC.emotions, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    intangibleConcepts = method(GROUP_TITLES[ddval], INTANGIBLES.concepts, INTANGIBLES_DESC.concepts, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    intangibleSymbols = method(GROUP_TITLES[ddval], INTANGIBLES.symbols, INTANGIBLES_DESC.symbols, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    intangibleZodiac = method(GROUP_TITLES[ddval], INTANGIBLES.zodiac, INTANGIBLES_DESC.zodiac, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    intangibleNumbers = method(GROUP_TITLES[ddval], INTANGIBLES.numbers, INTANGIBLES_DESC.numbers, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    intangibleNumbersystem = method(GROUP_TITLES[ddval], INTANGIBLES.numbersystem, INTANGIBLES_DESC.numbersystem, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " photo of a Utah Teapot");
    referenceGames = method(GROUP_TITLES[ddval], REFERENCEMEDIA.videogames, REFERENCEMEDIA_DESC.videogames, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, ', " --ar 16:9 --v 3", "", " style, Utah Teapot");
    referenceAnimeStudio = method(GROUP_TITLES[ddval], REFERENCEMEDIA.animestudios, REFERENCEMEDIA_DESC.animestudios, "mj3", images_mj, images_sd, handleShow, handleClose, statesModals, props.isMobile,'Utah Teapot, anime ', " --ar 16:9 --v 3", "", " style, anime of a Utah Teapot");

  return (
    <div className='bg2 hideScrollbarX'>
      <div className='aspect '>
        <div className='bg1 '>
          <SiteNavbar url='/resource/ai/modifiers' brand="Rex's Modifier Sheet" showMods={true} selected={ddval} handleSelect={handleSelect} dark={props.darkMode} toggleDark={props.toggleDarkMode}></SiteNavbar>

          <Container fluid className="">
          <Row className="modifier_descbox"><Col><h2 className="darkModeText_Description">{GROUP_TITLES[ddval]}</h2></Col></Row>
            <Row className="modifier_descbox"><Col><p className="darkModeText_Description">{GROUP_DESCRIPTIONS[ddval]}</p></Col></Row>
          <hr className="modifier_hr"></hr>
          {ddval == "materialsMetals" ? materialsMetals : <div></div>}
          {ddval == "materialsGemstones" ? materialsGemstones : <div></div>}
          
          {ddval == "stylesPhotosites" ? stylesPhotosites : <div></div>}
          {ddval == "stylesTimeframes" ? stylesTimeframes : <div></div>}
          {ddval == "stylesAbstractions" ? stylesAbstractions : <div></div>}
          {ddval == "stylesRenderer" ? stylesRenderer : <div></div>}
          {ddval == "stylesComplexity" ? stylesComplexity : <div></div>}
          {ddval == "stylesPunk" ? stylesPunk : <div></div>}
          {ddval == "stylesWave" ? stylesWave : <div></div>}
          {ddval == "colorsSimple" ? colorsSimple : <div></div>}
          {ddval == "colorsPalletes" ? colorsPalletes : <div></div>}
          {ddval == "shapesForms" ? shapesForms : <div></div>}
          {ddval == "intangibleEmotions" ? intangibleEmotions : <div></div>}
          {ddval == "intangibleConcepts" ? intangibleConcepts : <div></div>}
          {ddval == "intangibleSymbols" ? intangibleSymbols : <div></div>}
          {ddval == "intangibleZodiac" ? intangibleZodiac : <div></div>}
          {ddval == "intangibleNumbers" ? intangibleNumbers : <div></div>}
          {ddval == "intangibleNumbersystem" ? intangibleNumbersystem : <div></div>}
          {ddval == "referenceGames" ? referenceGames : <div></div>}
          {ddval == "referenceAnimeStudio" ? referenceAnimeStudio : <div></div>}
          
          <Row><Col><TeapotFooter></TeapotFooter></Col></Row>
          </Container>
       
        </div>
      </div>
    </div>
  );
}

export default AIModifiersPage;
